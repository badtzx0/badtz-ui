{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mouse-wave",
  "type": "registry:ui",
  "dependencies": [
    "clsx tailwind-merge @react-three/fiber @react-three/drei three"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/ui/mouse-wave.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useRef } from \"react\"\nimport { useTexture } from \"@react-three/drei\"\nimport { ThreeEvent, useFrame, useThree } from \"@react-three/fiber\"\nimport gsap from \"gsap\"\nimport * as THREE from \"three\"\n\nimport { fragment, vertex } from \"@/registry/new-york-v4/ui/mouse-wave-shader\"\n\n//import { useControls } from \"leva\";\n\ninterface MouseWaveProps {\n  imageSrc: string\n  canvasWidth: number\n  canvasHeight: number\n}\n\nexport default function MouseWave({\n  imageSrc,\n  canvasWidth,\n  canvasHeight,\n}: MouseWaveProps) {\n  const plane = useRef<THREE.Mesh>(null)\n  const texture = useTexture(imageSrc)\n  const { raycaster, camera } = useThree()\n\n  const uniforms = useRef({\n    uTexture: { value: texture },\n    uTime: { value: 0 },\n    uHover: { value: new THREE.Vector2(0.5, 0.5) },\n    uHoverState: { value: 0 },\n  })\n\n  //If you ever want to experiment, you can install Leva and use the controls; otherwise, feel free to remove this.\n  /*\n  const controls = useControls(\"Shader Controls\", {\n    uTime: { value: 0, min: 0, max: 10, step: 0.1 },\n    uHoverState: { value: 0, min: 0, max: 10, step: 0.01 },\n  });\n \n  useFrame(() => {\n    uniforms.current.uTime.value = controls.uTime;\n    uniforms.current.uHoverState.value = controls.uHoverState;\n  });\n  */\n\n  useFrame((state) => {\n    if (plane.current) {\n      const material = plane.current.material as THREE.ShaderMaterial\n      material.uniforms.uTime.value = state.clock.elapsedTime\n    }\n  })\n\n  useEffect(() => {\n    if (camera instanceof THREE.PerspectiveCamera) {\n      camera.aspect = canvasWidth / canvasHeight\n      camera.updateProjectionMatrix()\n    }\n  }, [canvasWidth, canvasHeight, camera])\n\n  const handlePointerMove = (event: ThreeEvent<PointerEvent>) => {\n    if (!plane.current) return\n\n    const pointer = new THREE.Vector2(\n      (event.clientX / window.innerWidth) * 2 - 1,\n      -(event.clientY / window.innerHeight) * 2 + 1\n    )\n\n    raycaster.setFromCamera(pointer, camera)\n    const intersects = raycaster.intersectObject(plane.current!)\n\n    if (intersects.length > 0) {\n      const obj = intersects[0].object as THREE.Mesh\n      const uv = intersects[0].uv\n\n      if (uv) {\n        ;(obj.material as THREE.ShaderMaterial).uniforms.uHover.value.set(\n          uv.x,\n          uv.y\n        )\n      }\n    }\n  }\n\n  const handlePointerEnter = () => {\n    gsap.to(uniforms.current.uHoverState, {\n      duration: 1,\n      value: 1,\n    })\n  }\n\n  const handlePointerLeave = () => {\n    gsap.to(uniforms.current.uHoverState, {\n      duration: 1,\n      value: 0,\n    })\n  }\n\n  return (\n    <mesh\n      ref={plane}\n      onPointerMove={handlePointerMove}\n      onPointerEnter={handlePointerEnter}\n      onPointerLeave={handlePointerLeave}\n      position={[0, 0, 0]}\n    >\n      <planeGeometry args={[canvasWidth, canvasHeight, 45, 45]} />\n      <shaderMaterial\n        side={THREE.DoubleSide}\n        vertexShader={vertex}\n        fragmentShader={fragment}\n        uniforms={uniforms.current}\n      />\n    </mesh>\n  )\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york-v4/ui/mouse-wave-scene.tsx",
      "content": "\"use client\"\n\nimport React, { useCallback, useEffect, useRef, useState } from \"react\"\nimport { Canvas } from \"@react-three/fiber\"\nimport * as THREE from \"three\"\n\nimport MouseWave from \"@/registry/new-york-v4/ui/mouse-wave\"\n\ninterface MouseWaveSceneProps {\n  imageSrc: string\n  alt?: string\n  marginFactor?: number\n}\n\nexport default function MouseWaveScene({\n  imageSrc,\n  alt,\n  marginFactor = 1.05,\n}: MouseWaveSceneProps) {\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 768)\n  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0,\n  })\n  const [key, setKey] = useState(0)\n\n  const updateDimensions = useCallback(() => {\n    if (!containerRef.current) return\n\n    const parentWidth = containerRef.current.clientWidth\n    setIsMobile(window.innerWidth < 640)\n    const img = new Image()\n    img.src = imageSrc\n    img.onload = () => {\n      const aspect = img.width / img.height\n      const newHeight = parentWidth / aspect\n      setDimensions({\n        width: parentWidth,\n        height: parentWidth / aspect,\n      })\n\n      if (!isMobile) {\n        const newDistance =\n          (newHeight / 2 / Math.tan((45 * Math.PI) / 360)) * marginFactor\n        if (cameraRef.current) {\n          cameraRef.current.position.set(0, 0, newDistance)\n          cameraRef.current.updateProjectionMatrix()\n        }\n      }\n    }\n  }, [imageSrc])\n\n  useEffect(() => {\n    updateDimensions()\n    const observer = new ResizeObserver(() => {\n      requestAnimationFrame(updateDimensions)\n    })\n\n    window.addEventListener(\"resize\", updateDimensions)\n\n    if (containerRef.current) observer.observe(containerRef.current)\n    return () => {\n      observer.disconnect()\n      window.removeEventListener(\"resize\", updateDimensions)\n    }\n  }, [updateDimensions])\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setKey(1)\n    }, 100)\n\n    return () => clearTimeout(timer)\n  }, [])\n\n  return (\n    <div\n      ref={containerRef}\n      style={{ width: \"100%\", height: dimensions.height }}\n    >\n      {isMobile ? (\n        <img\n          src={imageSrc}\n          alt={alt || \"Shader preview\"}\n          style={{ width: \"100%\", height: \"100%\", objectFit: \"cover\" }}\n        />\n      ) : (\n        <Canvas\n          key={key}\n          camera={{\n            fov: 45,\n            aspect: dimensions.width / dimensions.height,\n            near: 0.1,\n            far: 1000,\n            position: [\n              0,\n              0,\n              dimensions.height / 2 / Math.tan((45 * Math.PI) / 360),\n            ],\n          }}\n          onCreated={({ camera }) => {\n            cameraRef.current = camera as THREE.PerspectiveCamera\n          }}\n          style={{ width: \"100%\", height: \"100%\" }}\n        >\n          <MouseWave\n            imageSrc={imageSrc}\n            canvasWidth={dimensions.width}\n            canvasHeight={dimensions.height}\n          />\n        </Canvas>\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york-v4/ui/mouse-wave-shader.tsx",
      "content": "// Classic 3D Perlin Noise created by Stefan Gustavson\n\nexport const vertex = `\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n \nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P);\n  vec3 Pi1 = Pi0 + vec3(1.0);\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P);\n  vec3 Pf1 = Pf0 - vec3(1.0);\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n \n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n \n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n \n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n \n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n \n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n \n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n \n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n \nuniform float uTime;\nuniform vec2 uHover;\nuniform float uHoverState;\n \nvarying float vNoise;\nvarying vec2 vUv;\n \nvoid main() {\n  vec3 newposition = position;\n  float PI = 3.1415925;\n  float noise = cnoise(3.*vec3(position.x,position.y,position.z + uTime/30.));\n  float dist = distance(uv, uHover);\n  newposition.z += uHoverState*10.*sin(dist*10. + uTime);\n  vNoise = uHoverState*sin(dist*10. - uTime);\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( newposition, 1.0);\n}\n`\n\nexport const fragment = `\n  uniform sampler2D uTexture;\n  varying vec2 vUv;\n  varying float vNoise;\n  uniform float uTime;\n \n  void main() {\n    vec2 newUV = vUv;\n    vec4 color = texture2D(uTexture, vUv);\n    gl_FragColor = color;\n    gl_FragColor.rgb += 0.0035*vec3(vNoise);\n  }\n`\n",
      "type": "registry:ui"
    }
  ]
}