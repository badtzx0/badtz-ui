{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-card-2",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/ui/animated-card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface CardProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function AnimatedCard({ className, ...props }: CardProps) {\n  return (\n    <div\n      role=\"region\"\n      aria-labelledby=\"card-title\"\n      aria-describedby=\"card-description\"\n      className={cn(\n        \"group/animated-card relative w-[356px] overflow-hidden rounded-xl border border-zinc-200 bg-white shadow-sm dark:border-zinc-900 dark:bg-black\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport function CardBody({ className, ...props }: CardProps) {\n  return (\n    <div\n      role=\"group\"\n      className={cn(\n        \"flex flex-col space-y-1.5 border-t border-zinc-200 p-4 dark:border-zinc-900\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\ninterface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {}\n\nexport function CardTitle({ className, ...props }: CardTitleProps) {\n  return (\n    <h3\n      className={cn(\n        \"text-lg leading-none font-semibold tracking-tight text-black dark:text-white\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\ninterface CardDescriptionProps\n  extends React.HTMLAttributes<HTMLParagraphElement> {}\n\nexport function CardDescription({ className, ...props }: CardDescriptionProps) {\n  return (\n    <p\n      className={cn(\n        \"text-sm text-neutral-500 dark:text-neutral-400\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport function CardVisual({ className, ...props }: CardProps) {\n  return (\n    <div\n      className={cn(\"h-[180px] w-[356px] overflow-hidden\", className)}\n      {...props}\n    />\n  )\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york-v4/ui/visual-2.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useEffect, useState } from \"react\"\n\ninterface Visual2Props {\n  mainColor?: string\n  secondaryColor?: string\n  gridColor?: string\n}\n\nexport function Visual2({\n  mainColor = \"#8b5cf6\",\n  secondaryColor = \"#fbbf24\",\n  gridColor = \"#80808015\",\n}: Visual2Props) {\n  const [hovered, setHovered] = useState(false)\n\n  return (\n    <>\n      <div\n        className=\"absolute inset-0 z-20\"\n        onMouseEnter={() => setHovered(true)}\n        onMouseLeave={() => setHovered(false)}\n        style={\n          {\n            \"--color\": mainColor,\n            \"--secondary-color\": secondaryColor,\n          } as React.CSSProperties\n        }\n      />\n      <div className=\"relative h-[180px] w-[356px] overflow-hidden rounded-t-lg\">\n        <Layer1\n          hovered={hovered}\n          color={mainColor}\n          secondaryColor={secondaryColor}\n        />\n        <Layer2 color={mainColor} />\n        <Layer3 color={mainColor} />\n        <Layer4\n          color={mainColor}\n          secondaryColor={secondaryColor}\n          hovered={hovered}\n        />\n        <EllipseGradient color={mainColor} />\n        <GridLayer color={gridColor} />\n      </div>\n    </>\n  )\n}\n\ninterface LayerProps {\n  color: string\n  secondaryColor?: string\n  hovered?: boolean\n}\n\nconst EllipseGradient: React.FC<{ color: string }> = ({ color }) => {\n  return (\n    <div className=\"absolute inset-0 z-[5] flex h-full w-full items-center justify-center\">\n      <svg\n        width=\"356\"\n        height=\"196\"\n        viewBox=\"0 0 356 180\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <rect width=\"356\" height=\"180\" fill=\"url(#paint0_radial_12_207)\" />\n        <defs>\n          <radialGradient\n            id=\"paint0_radial_12_207\"\n            cx=\"0\"\n            cy=\"0\"\n            r=\"1\"\n            gradientUnits=\"userSpaceOnUse\"\n            gradientTransform=\"translate(178 98) rotate(90) scale(98 178)\"\n          >\n            <stop stopColor={color} stopOpacity=\"0.25\" />\n            <stop offset=\"0.34\" stopColor={color} stopOpacity=\"0.15\" />\n            <stop offset=\"1\" stopOpacity=\"0\" />\n          </radialGradient>\n        </defs>\n      </svg>\n    </div>\n  )\n}\n\nconst GridLayer: React.FC<{ color: string }> = ({ color }) => {\n  return (\n    <div\n      style={{ \"--grid-color\": color } as React.CSSProperties}\n      className=\"pointer-events-none absolute inset-0 z-[4] h-full w-full bg-transparent bg-[linear-gradient(to_right,var(--grid-color)_1px,transparent_1px),linear-gradient(to_bottom,var(--grid-color)_1px,transparent_1px)] [mask-image:radial-gradient(ellipse_50%_50%_at_50%_50%,#000_60%,transparent_100%)] bg-[size:20px_20px] bg-center opacity-70\"\n    />\n  )\n}\n\nconst Layer1: React.FC<LayerProps> = ({ hovered, color, secondaryColor }) => {\n  const [mainProgress, setMainProgress] = useState(12.5)\n  const [secondaryProgress, setSecondaryProgress] = useState(0)\n\n  useEffect(() => {\n    let timeout: NodeJS.Timeout\n\n    if (hovered) {\n      timeout = setTimeout(() => {\n        setMainProgress(66)\n        setSecondaryProgress(100)\n      }, 200)\n    } else {\n      setMainProgress(12.5)\n      setSecondaryProgress(0)\n    }\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [hovered])\n\n  const radius = 40\n  const circumference = 2 * Math.PI * radius\n  const mainDashoffset = circumference - (mainProgress / 100) * circumference\n  const secondaryDashoffset =\n    circumference - (secondaryProgress / 100) * circumference\n\n  return (\n    <div className=\"ease-[cubic-bezier(0.6, 0.6, 0, 1)] absolute top-0 left-0 z-[7] flex h-[360px] w-[356px] transform items-center justify-center transition-transform duration-500 group-hover/animated-card:-translate-y-[90px] group-hover/animated-card:scale-110\">\n      <div className=\"relative flex h-[120px] w-[120px] items-center justify-center text-[#00000050] dark:text-white\">\n        <div className=\"donut-chart-container relative\">\n          <svg width=\"120\" height=\"120\" viewBox=\"0 0 100 100\">\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r={radius}\n              stroke=\"currentColor\"\n              strokeWidth=\"10\"\n              fill=\"transparent\"\n              opacity={0.2}\n            />\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r={radius}\n              stroke={secondaryColor}\n              strokeWidth=\"14\"\n              fill=\"transparent\"\n              strokeDasharray={circumference}\n              strokeDashoffset={secondaryDashoffset}\n              transform=\"rotate(-90 50 50)\"\n              style={{\n                transition:\n                  \"stroke-dashoffset 0.5s cubic-bezier(0.6, 0.6, 0, 1)\",\n              }}\n            />\n            <circle\n              cx=\"50\"\n              cy=\"50\"\n              r={radius}\n              stroke={color}\n              strokeWidth=\"14\"\n              fill=\"transparent\"\n              strokeDasharray={circumference}\n              strokeDashoffset={mainDashoffset}\n              transform=\"rotate(-90 50 50)\"\n              style={{\n                transition:\n                  \"stroke-dashoffset 0.5s cubic-bezier(0.6, 0.6, 0, 1)\",\n              }}\n            />\n          </svg>\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <span className=\"font-gilroy text-xl text-black dark:text-white\">\n              {hovered\n                ? secondaryProgress > 66\n                  ? secondaryProgress\n                  : mainProgress\n                : mainProgress}\n              %\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst Layer2: React.FC<{ color: string }> = ({ color }) => {\n  return (\n    <div\n      className=\"relative h-full w-[356px]\"\n      style={{ \"--color\": color } as React.CSSProperties}\n    >\n      <div className=\"ease-[cubic-bezier(0.6, 0.6, 0, 1)] absolute inset-0 z-[6] flex w-[356px] translate-y-0 items-start justify-center bg-transparent p-4 transition-transform duration-500 group-hover/animated-card:translate-y-full\">\n        <div className=\"ease-[cubic-bezier(0.6, 0.6, 0, 1)] rounded-md border border-zinc-200 bg-white/25 px-2 py-1.5 opacity-100 backdrop-blur-sm transition-opacity duration-500 group-hover/animated-card:opacity-0 dark:border-zinc-800 dark:bg-black/25\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"h-2 w-2 shrink-0 rounded-full bg-[var(--color)]\" />\n            <p className=\"text-xs text-black dark:text-white\">\n              Random Data Visualization\n            </p>\n          </div>\n          <p className=\"mt-1 text-xs text-neutral-500 dark:text-neutral-400\">\n            Displaying some interesting stats.\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst Layer3: React.FC<{ color: string }> = ({ color }) => {\n  return (\n    <div className=\"ease-[cubic-bezier(0.6, 0.6, 0, 1)] absolute inset-0 z-[6] flex translate-y-full items-center justify-center opacity-0 transition-all duration-500 group-hover/animated-card:translate-y-0 group-hover/animated-card:opacity-100\">\n      <svg\n        width=\"356\"\n        height=\"180\"\n        viewBox=\"0 0 356 180\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <rect width=\"356\" height=\"180\" fill=\"url(#paint0_linear_29_3)\" />\n        <defs>\n          <linearGradient\n            id=\"paint0_linear_29_3\"\n            x1=\"178\"\n            y1=\"0\"\n            x2=\"178\"\n            y2=\"180\"\n            gradientUnits=\"userSpaceOnUse\"\n          >\n            <stop offset=\"0.35\" stopColor={color} stopOpacity=\"0\" />\n            <stop offset=\"1\" stopColor={color} stopOpacity=\"0.3\" />\n          </linearGradient>\n        </defs>\n      </svg>\n    </div>\n  )\n}\n\nconst Layer4: React.FC<LayerProps> = ({ color, secondaryColor, hovered }) => {\n  const items = [\n    { id: 1, translateX: \"100\", translateY: \"50\", text: \"ReactJS\" },\n    { id: 2, translateX: \"100\", translateY: \"-50\", text: \"MongoDB\" },\n    { id: 3, translateX: \"125\", translateY: \"0\", text: \"Prisma\" },\n    { id: 4, translateX: \"-125\", translateY: \"0\", text: \"NextJs\" },\n    { id: 5, translateX: \"-100\", translateY: \"50\", text: \"Auth.js\" },\n    { id: 6, translateX: \"-100\", translateY: \"-50\", text: \"Stripe\" },\n  ]\n\n  return (\n    <div className=\"ease-[cubic-bezier(0.6, 0.6, 0, 1)] absolute inset-0 z-[7] flex items-center justify-center opacity-0 transition-opacity duration-500 group-hover/animated-card:opacity-100\">\n      {items.map((item, index) => (\n        <div\n          key={item.id}\n          className=\"ease-[cubic-bezier(0.6, 0.6, 0, 1)] absolute flex items-center justify-center gap-1 rounded-full border border-zinc-200 bg-white/70 px-1.5 py-0.5 backdrop-blur-sm transition-all duration-500 dark:border-zinc-800 dark:bg-black/70\"\n          style={{\n            transform: hovered\n              ? `translate(${item.translateX}px, ${item.translateY}px)`\n              : \"translate(0px, 0px)\",\n          }}\n        >\n          <div\n            className=\"h-1.5 w-1.5 rounded-full\"\n            style={{ backgroundColor: index < 3 ? color : secondaryColor }}\n          />\n          <span className=\"ml-1 text-[10px] text-black dark:text-white\">\n            {item.text}\n          </span>\n        </div>\n      ))}\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}