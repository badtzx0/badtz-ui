{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-keyboard",
  "type": "registry:ui",
  "dependencies": [
    "clsx tailwind-merge framer-motion class-variance-authority"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/ui/animated-keyboard.tsx",
      "content": "\"use client\"\n\nimport { memo, ReactNode, useEffect, useState } from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface CSSCustomProperties extends React.CSSProperties {\n  \"--keycap-height\"?: string\n}\n\ntype KeycapProps = {\n  height?: string\n  keylightColor?: \"default\" | \"red\" | \"blue\" | \"green\" | \"purple\" | \"rgb\"\n  char?: string\n  secondaryChar?: string\n  className?: string\n} & VariantProps<typeof keycapVariants>\n\nconst keycapVariants = cva(\n  \"relative flex flex-shrink-0 cursor-pointer flex-col items-center justify-center rounded-[5px] bg-gradient-to-b p-2 leading-4 bg-blend-overlay transition-all duration-200 ease-out select-none\",\n  {\n    variants: {\n      variant: {\n        default: \"aspect-square\",\n        double: \"aspect-square\",\n        tab: \"aspect-[1.77] [&_span]:text-[calc(var(--keycap-height)/3.5)]\",\n        caps: \"aspect-[1.85] [&_span]:text-[calc(var(--keycap-height)/3.5)]\",\n        shift: \"aspect-[2.32] [&_span]:text-[calc(var(--keycap-height)/3.5)]\",\n        command: \"aspect-[1.34] [&_span]:text-[calc(var(--keycap-height)/3.5)]\",\n        space: \"aspect-[8.3] [&_span]:text-[calc(var(--keycap-height)/3.5)]\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst keylightColors = {\n  default: {\n    light: \"before:shadow-[0px_1px_3px_0px_#00000015]\",\n    dark: \"dark:before:shadow-[0px_2px_5px_0px_#ffffff20]\",\n  },\n  red: {\n    light: \"before:shadow-[0px_1px_3px_0px_#ff000040]\",\n    dark: \"dark:before:shadow-[0px_2px_5px_0px_#ff0000]\",\n  },\n  blue: {\n    light: \"before:shadow-[0px_1px_3px_0px_#0000ff40]\",\n    dark: \"dark:before:shadow-[0px_2px_5px_0px_#0000ff]\",\n  },\n  green: {\n    light: \"before:shadow-[0px_1px_3px_0px_#00ff0040]\",\n    dark: \"dark:before:shadow-[0px_2px_5px_0px_#00ff00]\",\n  },\n  purple: {\n    light: \"before:shadow-[0px_1px_3px_0px_#80008040]\",\n    dark: \"dark:before:shadow-[0px_2px_5px_0px_#800080]\",\n  },\n  rgb: {\n    light:\n      \"before:shadow-[0px_1px_3px_0px_var(--rgb-color)] before:transition-[box-shadow] before:duration-300 before:ease-in-out\",\n    dark: \"dark:before:shadow-[0px_2px_5px_0px_var(--rgb-color)] before:transition-[box-shadow] before:duration-300 before:ease-in-out\",\n  },\n}\n\nconst rgbColors = [\n  \"#ff0000\",\n  \"#ff00ff\",\n  \"#0000ff\",\n  \"#00ffff\",\n  \"#00ff00\",\n  \"#ffff00\",\n]\n\nconst RGBAnimation = memo(function RGBAnimation({\n  currentColorIndex,\n  keylightColor,\n}: {\n  currentColorIndex: number\n  keylightColor: string\n}) {\n  if (keylightColor !== \"rgb\") return null\n\n  return (\n    <style jsx global>{`\n      :root {\n        --rgb-color: ${rgbColors[currentColorIndex]};\n      }\n    `}</style>\n  )\n})\n\nexport const Keycap = memo(function Keycap({\n  height = \"48px\",\n  keylightColor = \"default\",\n  char,\n  secondaryChar,\n  variant,\n  className,\n}: KeycapProps) {\n  const [currentColorIndex, setCurrentColorIndex] = useState(0)\n\n  if (secondaryChar && variant !== \"double\") {\n    console.warn(\"secondaryChar should only be used with variant 'double'\")\n    secondaryChar = undefined\n  }\n\n  useEffect(() => {\n    if (keylightColor !== \"rgb\") return\n\n    const interval = setInterval(() => {\n      setCurrentColorIndex((prev) => (prev + 1) % rgbColors.length)\n    }, 3000)\n\n    return () => clearInterval(interval)\n  }, [keylightColor])\n\n  return (\n    <>\n      <RGBAnimation\n        currentColorIndex={currentColorIndex}\n        keylightColor={keylightColor}\n      />\n      <div\n        style={\n          {\n            \"--keycap-height\": height,\n          } as CSSCustomProperties\n        }\n        className={cn(\n          keycapVariants({ variant }),\n          \"dark:from-secondary dark:to-background/50 gap-0.5 from-white to-neutral-50 text-neutral-800/80 drop-shadow-sm dark:text-[#D8D8D8]\",\n          \"shadow-[0_1.5px_0.5px_2.5px_rgb(163_163_163/0.08),0_0_0.5px_1px_rgb(163_163_163/0.12),inset_0_2px_1px_1px_rgb(163_163_163/0.06),inset_0_1px_1px_1px_rgb(255_255_255/0.6)] dark:shadow-[0_1.5px_0.5px_2.5px_rgba(0,0,0,0.5),0_0_0.5px_1px_#000,inset_0_2px_1px_1px_rgba(0,0,0,0.25),inset_0_1px_1px_1px_rgba(255,255,255,0.2)]\",\n          \"hover:translate-y-px hover:bg-gradient-to-b hover:from-neutral-50/40 hover:to-neutral-100/30 dark:hover:from-[rgba(255,255,255,0.04)] dark:hover:to-[rgba(255,255,255,0.016)]\",\n          \"hover:shadow-[0_1.5px_1px_0px_rgb(163_163_163/0.06),0_0_0.5px_1px_rgb(163_163_163/0.1),inset_0_0.5px_1px_0.5px_rgb(255_255_255/0.5)] dark:hover:shadow-[0_1.5px_1px_0px_rgba(0,0,0,0.2),0_0_0.5px_1px_#000,inset_0_0.5px_1px_0.5px_rgba(255,255,255,0.2)]\",\n          \"before:absolute before:inset-0 before:rounded-[inherit]\",\n          keylightColors[keylightColor].light,\n          keylightColors[keylightColor].dark,\n          \"h-[var(--keycap-height)]\",\n          \"will-change-transform\",\n          className\n        )}\n      >\n        <div className=\"relative z-10 flex h-full flex-col items-center justify-center\">\n          {variant === \"double\" ? (\n            <div className=\"flex h-full w-full flex-col items-center justify-between p-[15%]\">\n              <span className=\"text-[calc(var(--keycap-height)/4)] leading-none font-medium\">\n                {secondaryChar}\n              </span>\n              <span className=\"text-[calc(var(--keycap-height)/3.5)] leading-none font-medium\">\n                {char}\n              </span>\n            </div>\n          ) : (\n            <span className=\"text-[calc(var(--keycap-height)/2.75)] leading-none font-medium\">\n              {char}\n            </span>\n          )}\n        </div>\n      </div>\n    </>\n  )\n})\n\ntype KeyboardProps = {\n  children: ReactNode\n  className?: string\n  gap?: \"sm\" | \"md\" | \"lg\"\n}\n\nexport function Keyboard({ children, className, gap = \"md\" }: KeyboardProps) {\n  return (\n    <div\n      className={cn(\n        \"border-border rounded-[10px] border !bg-white p-2.5 dark:!bg-[#21222550]\",\n        className\n      )}\n    >\n      <div\n        className={cn(\"relative flex flex-col\", {\n          \"gap-1\": gap === \"sm\",\n          \"gap-2.5\": gap === \"md\",\n          \"gap-3\": gap === \"lg\",\n        })}\n      >\n        {children}\n      </div>\n    </div>\n  )\n}\n\ntype KeyRowProps = {\n  children: ReactNode\n  className?: string\n  gap?: \"sm\" | \"md\" | \"lg\"\n}\n\nexport function KeyRow({ children, className, gap = \"md\" }: KeyRowProps) {\n  return (\n    <div\n      className={cn(\n        \"flex flex-nowrap\",\n        {\n          \"gap-1\": gap === \"sm\",\n          \"gap-2.5\": gap === \"md\",\n          \"gap-3\": gap === \"lg\",\n        },\n        className\n      )}\n    >\n      {children}\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}