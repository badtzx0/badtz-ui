{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hyperspace-background",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/ui/hyperspace-background.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface HyperspaceBackgroundProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  starTrailOpacity?: number\n  starSpeed?: number\n  starColor?: string\n  starSize?: number\n  className?: string\n}\n\ninterface StarState {\n  alpha: number\n  angle: number\n  x: number\n  vX: number\n  y: number\n  vY: number\n  size: number\n  active: boolean\n}\n\nfunction hexToRgb(hex: string): [number, number, number] {\n  const cleanedHex = hex.replace(\"#\", \"\")\n  const bigint = parseInt(cleanedHex, 16)\n  const r = (bigint >> 16) & 255\n  const g = (bigint >> 8) & 255\n  const b = bigint & 255\n  return [r, g, b]\n}\n\nfunction randomInRange(max: number, min: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function HyperspaceBackground({\n  starTrailOpacity = 0.5,\n  starSpeed = 1.01,\n  starColor = \"#FFFFFF\",\n  starSize = 0.5,\n  className,\n  ...props\n}: HyperspaceBackgroundProps) {\n  const canvasRef = React.useRef<HTMLCanvasElement | null>(null)\n  const [r, g, b] = hexToRgb(starColor)\n\n  React.useEffect(() => {\n    if (typeof window === \"undefined\") return\n\n    const canvas = canvasRef.current\n    if (!canvas) return\n    const context = canvas.getContext(\"2d\")\n    if (!context) return\n\n    const resizeCanvas = () => {\n      const container = canvas.parentElement\n      if (container) {\n        canvas.width = container.offsetWidth\n        canvas.height = container.offsetHeight\n      }\n    }\n\n    const debounceResize = () => {\n      let timeout: NodeJS.Timeout\n      return () => {\n        clearTimeout(timeout)\n        timeout = setTimeout(resizeCanvas, 100)\n      }\n    }\n\n    resizeCanvas()\n\n    const sizeIncrement = 1.01\n    const radians = Math.PI / 180\n\n    class Star {\n      state: StarState\n\n      constructor() {\n        this.state = {\n          alpha: 0,\n          angle: 0,\n          x: 0,\n          vX: 0,\n          y: 0,\n          vY: 0,\n          size: starSize,\n          active: true,\n        }\n        this.reset()\n      }\n\n      reset() {\n        const angle = randomInRange(0, 360) * radians\n        const vX = Math.cos(angle)\n        const vY = Math.sin(angle)\n\n        if (!canvas) return\n\n        const travelled =\n          Math.random() > 0.5\n            ? Math.random() * Math.max(canvas.width, canvas.height) +\n              Math.random() * (canvas.width * 0.24)\n            : Math.random() * (canvas.width * 0.25)\n\n        this.state = {\n          alpha: Math.random(),\n          angle: randomInRange(0, 360) * radians,\n          x: Math.floor(vX * travelled) + canvas.width / 2,\n          vX,\n          y: Math.floor(vY * travelled) + canvas.height / 2,\n          vY,\n          size: starSize,\n          active: true,\n        }\n      }\n    }\n\n    const stars = new Array(300).fill(null).map(() => new Star())\n\n    let animationFrameId: number\n    const render = () => {\n      const invertedOpacity = 1 - starTrailOpacity\n      context.fillStyle = `rgba(0, 0, 0, ${invertedOpacity})`\n      context.fillRect(0, 0, canvas.width, canvas.height)\n\n      for (const star of stars) {\n        const { x, y, size, vX, vY } = star.state\n\n        const newX = x + vX\n        const newY = y + vY\n\n        if (\n          newX < 0 ||\n          newX > canvas.width ||\n          newY < 0 ||\n          newY > canvas.height\n        ) {\n          star.reset()\n        } else {\n          star.state = {\n            ...star.state,\n            x: newX,\n            vX: star.state.vX * starSpeed,\n            y: newY,\n            vY: star.state.vY * starSpeed,\n            size: size * sizeIncrement,\n          }\n\n          context.strokeStyle = `rgba(${r}, ${g}, ${b}, ${star.state.alpha})`\n          context.lineWidth = size\n          context.beginPath()\n          context.moveTo(x, y)\n          context.lineTo(star.state.x, star.state.y)\n          context.stroke()\n        }\n      }\n\n      animationFrameId = requestAnimationFrame(render)\n    }\n\n    render()\n\n    const debouncedResize = debounceResize()\n    window.addEventListener(\"resize\", debouncedResize)\n\n    return () => {\n      cancelAnimationFrame(animationFrameId)\n      window.removeEventListener(\"resize\", debouncedResize)\n    }\n  }, [starTrailOpacity, starSpeed, starColor, starSize])\n\n  return (\n    <div className={cn(\"absolute inset-0 h-full w-full\", className)} {...props}>\n      <canvas ref={canvasRef} className=\"absolute inset-0 h-full w-full\" />\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}