{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dock",
  "type": "registry:ui",
  "dependencies": [
    "clsx tailwind-merge",
    "motion"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/ui/dock.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useRef } from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface DockProps {\n  className?: string\n  children: React.ReactNode\n  maxAdditionalSize?: number\n  iconSize?: number\n}\n\ninterface DockIconProps {\n  className?: string\n  src?: string\n  href: string\n  name: string\n  handleIconHover?: (e: React.MouseEvent<HTMLLIElement>) => void\n  children?: React.ReactNode\n  iconSize?: number\n}\n\ntype ScaleValueParams = [number, number]\n\nexport const scaleValue = function (\n  value: number,\n  from: ScaleValueParams,\n  to: ScaleValueParams\n): number {\n  const scale = (to[1] - to[0]) / (from[1] - from[0])\n  const capped = Math.min(from[1], Math.max(from[0], value)) - from[0]\n  return Math.floor(capped * scale + to[0])\n}\n\nexport function DockIcon({\n  className,\n  src,\n  href,\n  name,\n  handleIconHover,\n  children,\n  iconSize,\n}: DockIconProps) {\n  const ref = useRef<HTMLLIElement | null>(null)\n\n  return (\n    <>\n      <style jsx>\n        {`\n          .icon:hover + .icon {\n            width: calc(\n              var(--icon-size) * 1.33 + var(--dock-offset-right, 0px)\n            );\n            height: calc(\n              var(--icon-size) * 1.33 + var(--dock-offset-right, 0px)\n            );\n            margin-top: calc(\n              var(--icon-size) * -0.33 + var(--dock-offset-right, 0) * -1\n            );\n          }\n\n          .icon:hover + .icon + .icon {\n            width: calc(\n              var(--icon-size) * 1.17 + var(--dock-offset-right, 0px)\n            );\n            height: calc(\n              var(--icon-size) * 1.17 + var(--dock-offset-right, 0px)\n            );\n            margin-top: calc(\n              var(--icon-size) * -0.17 + var(--dock-offset-right, 0) * -1\n            );\n          }\n\n          .icon:has(+ .icon:hover) {\n            width: calc(var(--icon-size) * 1.33 + var(--dock-offset-left, 0px));\n            height: calc(\n              var(--icon-size) * 1.33 + var(--dock-offset-left, 0px)\n            );\n            margin-top: calc(\n              var(--icon-size) * -0.33 + var(--dock-offset-left, 0) * -1\n            );\n          }\n\n          .icon:has(+ .icon + .icon:hover) {\n            width: calc(var(--icon-size) * 1.17 + var(--dock-offset-left, 0px));\n            height: calc(\n              var(--icon-size) * 1.17 + var(--dock-offset-left, 0px)\n            );\n            margin-top: calc(\n              var(--icon-size) * -0.17 + var(--dock-offset-left, 0) * -1\n            );\n          }\n        `}\n      </style>\n      <li\n        ref={ref}\n        style={\n          {\n            transition:\n              \"width, height, margin-top, cubic-bezier(0.25, 1, 0.5, 1) 150ms\",\n            \"--icon-size\": `${iconSize}px`,\n          } as React.CSSProperties\n        }\n        onMouseMove={handleIconHover}\n        className={cn(\n          \"icon group/li flex h-[var(--icon-size)] w-[var(--icon-size)] cursor-pointer items-center justify-center px-[calc(var(--icon-size)*0.075)] hover:-mt-[calc(var(--icon-size)/2)] hover:h-[calc(var(--icon-size)*1.5)] hover:w-[calc(var(--icon-size)*1.5)] [&_img]:object-contain\",\n          className\n        )}\n      >\n        <a\n          href={href}\n          className=\"group/a relative aspect-square w-full rounded-[10px] border border-gray-100 bg-gradient-to-t from-neutral-100 to-white p-1.5 shadow-[rgba(0,_0,_0,_0.05)_0px_1px_0px_inset] after:absolute after:inset-0 after:rounded-[inherit] after:shadow-md after:shadow-zinc-800/10 dark:border-zinc-900 dark:from-zinc-900 dark:to-zinc-800 dark:shadow-[rgba(255,_255,_255,_0.3)_0px_1px_0px_inset]\"\n        >\n          <span className=\"absolute top-[-40px] left-1/2 -translate-x-1/2 rounded-md border border-gray-100 bg-gradient-to-t from-neutral-100 to-white p-1 px-2 text-xs whitespace-nowrap text-black opacity-0 transition-opacity duration-200 group-hover/li:opacity-100 dark:border-zinc-800 dark:from-zinc-900 dark:to-zinc-800 dark:text-white\">\n            {name}\n          </span>\n          {src ? (\n            <img\n              src={src}\n              alt={name}\n              className=\"h-full w-full rounded-[inherit]\"\n            />\n          ) : (\n            children\n          )}\n        </a>\n      </li>\n    </>\n  )\n}\n\nexport function Dock({\n  className,\n  children,\n  maxAdditionalSize = 5,\n  iconSize = 55,\n}: DockProps) {\n  const dockRef = useRef<HTMLDivElement | null>(null)\n\n  const handleIconHover = (e: React.MouseEvent<HTMLLIElement>) => {\n    if (!dockRef.current) return\n    const mousePos = e.clientX\n    const iconPosLeft = e.currentTarget.getBoundingClientRect().left\n    const iconWidth = e.currentTarget.getBoundingClientRect().width\n\n    const cursorDistance = (mousePos - iconPosLeft) / iconWidth\n    const offsetPixels = scaleValue(\n      cursorDistance,\n      [0, 1],\n      [maxAdditionalSize * -1, maxAdditionalSize]\n    )\n\n    dockRef.current.style.setProperty(\n      \"--dock-offset-left\",\n      `${offsetPixels * -1}px`\n    )\n\n    dockRef.current.style.setProperty(\n      \"--dock-offset-right\",\n      `${offsetPixels}px`\n    )\n  }\n\n  return (\n    <nav ref={dockRef} role=\"navigation\" aria-label=\"Main Dock\">\n      <ul\n        className={cn(\n          \"flex items-center rounded-xl border border-gray-100 bg-gradient-to-t from-neutral-50 to-white p-1 dark:border-zinc-900 dark:from-zinc-950 dark:to-zinc-900\",\n          className\n        )}\n      >\n        {React.Children.map(children, (child) =>\n          React.isValidElement<DockIconProps>(child)\n            ? React.cloneElement(child as React.ReactElement<DockIconProps>, {\n                handleIconHover,\n                iconSize,\n              })\n            : child\n        )}\n      </ul>\n    </nav>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}