{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shuffle-button",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/ui/shuffle-button.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useRef, useState } from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction shuffleChar(char: string): string {\n  const characters = \"abcdefghijklmnopqrstuvwxyz\"\n  return char === \" \"\n    ? \" \"\n    : characters[Math.floor(Math.random() * characters.length)]\n}\n\ninterface ShuffleButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: string\n  className?: string\n  duration?: number\n}\n\nexport function ShuffleButton({\n  children,\n  className,\n  duration = 1,\n  ...props\n}: ShuffleButtonProps) {\n  const [shuffledText, setShuffledText] = useState<string>(children)\n  const [isHovering, setIsHovering] = useState<boolean>(false)\n  const intervals = useRef<NodeJS.Timeout[]>([])\n  const timeouts = useRef<NodeJS.Timeout[]>([])\n\n  useEffect(() => {\n    const textArray = children.split(\"\")\n    const numberOfCharacters = textArray.filter((char) => char !== \" \").length\n    const ABC = (duration * 500) / numberOfCharacters\n\n    if (isHovering) {\n      textArray.forEach((char, index) => {\n        if (char !== \" \") {\n          const intervalId = setInterval(() => {\n            textArray[index] = shuffleChar(char)\n            setShuffledText(textArray.join(\"\"))\n          }, 25)\n          intervals.current.push(intervalId)\n\n          const timeoutId = setTimeout(\n            () => {\n              clearInterval(intervalId)\n              textArray[index] = children[index]\n              setShuffledText(textArray.join(\"\"))\n            },\n            ABC * (index + 1)\n          )\n          timeouts.current.push(timeoutId)\n        }\n      })\n    } else {\n      textArray.forEach((char, index) => {\n        if (char !== \" \") {\n          const intervalId = setInterval(() => {\n            textArray[numberOfCharacters - 1 - index] = shuffleChar(char)\n            setShuffledText(textArray.join(\"\"))\n          }, 25)\n          intervals.current.push(intervalId)\n\n          const timeoutId = setTimeout(\n            () => {\n              clearInterval(intervalId)\n              textArray[numberOfCharacters - 1 - index] =\n                children[numberOfCharacters - 1 - index]\n              setShuffledText(textArray.join(\"\"))\n            },\n            ABC * (index + 1)\n          )\n          timeouts.current.push(timeoutId)\n        }\n      })\n    }\n\n    return () => {\n      intervals.current.forEach(clearInterval)\n      timeouts.current.forEach(clearTimeout)\n      intervals.current = []\n      timeouts.current = []\n    }\n  }, [isHovering, children, duration])\n\n  return (\n    <button\n      className={cn(\n        \"inline-flex h-10 items-center justify-center gap-2 rounded-md bg-neutral-100 px-4 py-2 font-mono text-sm font-medium whitespace-nowrap text-black transition-colors disabled:pointer-events-none disabled:opacity-50 dark:bg-neutral-900 dark:text-white [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n        className\n      )}\n      onMouseEnter={() => setIsHovering(true)}\n      onMouseLeave={() => setIsHovering(false)}\n      {...props}\n    >\n      {shuffledText}\n    </button>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}