{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stagger-button",
  "type": "registry:ui",
  "dependencies": [
    "clsx tailwind-merge",
    "motion"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/ui/stagger-button.tsx",
      "content": "\"use client\"\n\nimport React, { CSSProperties, ReactNode, useEffect, useState } from \"react\"\nimport { stagger, useAnimate } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface StaggerButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  className?: string\n  children: ReactNode\n  duration?: number\n  staggerDelay?: number\n  height?: number\n}\n\nexport function StaggerButton({\n  className,\n  children,\n  duration = 0.2,\n  staggerDelay = 0.05,\n  height = 26,\n  ...props\n}: StaggerButtonProps) {\n  const [scope, animate] = useAnimate()\n  const [isHovered, setIsHovered] = useState<boolean>(false)\n\n  const onMouseEnter = () => {\n    setIsHovered(true)\n  }\n\n  const onMouseLeave = () => {\n    setIsHovered(false)\n  }\n\n  useEffect(() => {\n    if (isHovered) {\n      animate([\n        [\n          \".letter\",\n          {\n            rotateX: 90,\n          },\n          { duration, delay: stagger(staggerDelay) },\n        ],\n        [\n          \".letter::after\",\n          {\n            rotateX: 90,\n          },\n          { duration, delay: stagger(staggerDelay) },\n        ],\n      ])\n    } else {\n      animate([\n        [\n          \".letter\",\n          {\n            rotateX: 0,\n          },\n          { duration, delay: stagger(staggerDelay) },\n        ],\n        [\n          \".letter::after\",\n          {\n            rotateX: -90,\n          },\n          { duration, delay: stagger(staggerDelay) },\n        ],\n      ])\n    }\n  }, [isHovered, animate, duration, staggerDelay])\n\n  const lettersArray = children?.toString().split(\"\") || []\n\n  return (\n    <div\n      ref={scope}\n      style={\n        {\n          \"--height\": `${height}px`,\n          perspective: \"1000px\",\n        } as CSSProperties\n      }\n    >\n      <button\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        className={cn(\n          \"relative inline-flex h-10 items-center justify-center gap-2 rounded-md bg-neutral-100 px-4 py-2 text-sm font-medium whitespace-nowrap text-black transition-colors disabled:pointer-events-none disabled:opacity-50 dark:bg-neutral-900 dark:text-white [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n          className\n        )}\n        {...props}\n      >\n        <span className=\"sr-only\">{children}</span>\n        <span\n          aria-hidden\n          className=\"relative flex h-[--height] items-center justify-center overflow-hidden\"\n        >\n          {lettersArray.map((letter, index) => (\n            <span\n              style={{\n                transformStyle: \"preserve-3d\",\n                transition: `transform cubic-bezier(0.3, 0.65, 0.4, 1)`,\n              }}\n              data-letter={letter}\n              key={`${letter}-${index}`}\n              className=\"letter inline-block h-[--height] leading-[--height]\"\n            >\n              <span className=\"opacity-0\">{letter === \" \" ? \"Â \" : letter}</span>\n            </span>\n          ))}\n          <style jsx>{`\n            .letter::before {\n              content: attr(data-letter);\n              position: absolute;\n              left: 0;\n              top: 0;\n              transform: rotateX(0deg) translateZ(calc(var(--height) / 2));\n            }\n            .letter::after {\n              content: attr(data-letter);\n              position: absolute;\n              left: 0;\n              top: 0;\n              transform: rotateX(-90deg) translateZ(calc(var(--height) / 2));\n            }\n          `}</style>\n        </span>\n      </button>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}