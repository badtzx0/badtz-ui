{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "particles",
  "type": "registry:ui",
  "dependencies": [
    "clsx tailwind-merge @tsparticles/react @tsparticles/slim"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/ui/particles.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useId, useState } from \"react\"\nimport {\n  initParticlesEngine,\n  Particles as TSParticles,\n} from \"@tsparticles/react\"\nimport { loadSlim } from \"@tsparticles/slim\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype ParticleVariant = \"default\" | \"snow\" | \"stars\"\n\ninterface ParticleStyle {\n  count?: number\n  size?: number\n  speed?: number\n  opacity?: number\n  color?: string\n}\n\ninterface ParticlesProps {\n  className?: string\n  variant?: ParticleVariant\n  style?: ParticleStyle\n  interactive?: boolean\n  customOptions?: Record<string, unknown>\n}\n\nconst variantStyles: Record<\n  ParticleVariant,\n  ParticleStyle & { options?: Record<string, unknown> }\n> = {\n  default: {\n    count: 200,\n    size: 2,\n    speed: 1.5,\n    opacity: 0.8,\n    color: \"#FFFFFF\",\n  },\n  snow: {\n    count: 300,\n    size: 1.2,\n    speed: 1,\n    opacity: 0.6,\n    color: \"#FFFFFF\",\n    options: {\n      interactivity: {\n        detectOn: \"canvas\",\n        events: {\n          onHover: {\n            enable: false,\n          },\n        },\n      },\n      particles: {\n        move: {\n          enable: true,\n          speed: {\n            min: 2,\n            max: 3,\n          },\n          direction: \"bottom\",\n          random: true,\n          straight: false,\n          outModes: {\n            default: \"out\",\n          },\n        },\n        shape: {\n          type: \"circle\",\n        },\n      },\n    },\n  },\n  stars: {\n    count: 200,\n    size: 1.5,\n    speed: 0,\n    opacity: 0.8,\n    color: \"#FFFFFF\",\n    options: {\n      interactivity: {\n        detectOn: \"canvas\",\n        events: {\n          onHover: {\n            enable: false,\n          },\n        },\n      },\n      particles: {\n        move: {\n          enable: false,\n        },\n        twinkle: {\n          particles: {\n            enable: true,\n            frequency: 0.1,\n            opacity: 1,\n          },\n        },\n        shape: {\n          type: \"star\",\n        },\n        shadow: {\n          enable: true,\n          color: \"#FFFFFF\",\n          blur: 5,\n          offset: {\n            x: 0,\n            y: 0,\n          },\n        },\n        glow: {\n          enable: true,\n          color: \"#FFFFFF\",\n          distance: 10,\n          size: 2,\n        },\n      },\n    },\n  },\n}\n\nexport function Particles({\n  className,\n  variant = \"default\",\n  style = {},\n  interactive = true,\n  customOptions = {},\n}: ParticlesProps) {\n  const [isInitialized, setIsInitialized] = useState(false)\n\n  useEffect(() => {\n    initParticlesEngine(async (engine) => {\n      await loadSlim(engine)\n    }).then(() => {\n      setIsInitialized(true)\n    })\n  }, [])\n\n  const id = useId()\n\n  const baseStyle = variantStyles[variant]\n  const finalStyle = { ...baseStyle, ...style }\n\n  const defaultOptions = {\n    detectRetina: true,\n    fpsLimit: 120,\n    interactivity: {\n      detectOn: \"canvas\",\n      events: {\n        onHover: {\n          enable:\n            variant === \"snow\" || variant === \"stars\" ? false : interactive,\n          mode: \"repulse\",\n        },\n      },\n      modes: {\n        repulse: {\n          distance: 150,\n          duration: 1.2,\n          factor: 6,\n          speed: 0.5,\n        },\n      },\n    },\n    particles: {\n      number: {\n        value: finalStyle.count,\n      },\n      color: {\n        value: finalStyle.color,\n      },\n      opacity: {\n        value: {\n          min: (finalStyle.opacity || 0.8) / 5,\n          max: finalStyle.opacity || 0.8,\n        },\n        animation: {\n          enable: true,\n          sync: false,\n          speed: 2,\n        },\n      },\n      size: {\n        value: {\n          min: (finalStyle.size || 2) / 5,\n          max: finalStyle.size || 2,\n        },\n      },\n      move: {\n        enable: true,\n        speed: {\n          min: (finalStyle.speed || 1.5) / 5,\n          max: finalStyle.speed || 1.5,\n        },\n        direction: \"none\",\n        random: true,\n        straight: false,\n        outModes: {\n          default: \"out\",\n        },\n        attract: {\n          enable: false,\n          rotateX: 600,\n          rotateY: 1200,\n        },\n      },\n    },\n    fullScreen: {\n      enable: false,\n      zIndex: 1,\n    },\n    background: {\n      color: {\n        value: \"transparent\",\n      },\n    },\n  }\n\n  const deepMerge = (target: any, source: any) => {\n    const output = { ...target }\n    if (source) {\n      Object.keys(source).forEach((key) => {\n        if (source[key] instanceof Object && key in target) {\n          output[key] = deepMerge(target[key], source[key])\n        } else {\n          output[key] = source[key]\n        }\n      })\n    }\n    return output\n  }\n\n  const variantOptions = baseStyle.options || {}\n  const mergedOptions = deepMerge(defaultOptions, variantOptions)\n  const finalOptions = deepMerge(mergedOptions, customOptions)\n\n  return (\n    isInitialized && (\n      <TSParticles\n        id={id}\n        options={finalOptions}\n        className={cn(\"absolute inset-0\", className)}\n      />\n    )\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}