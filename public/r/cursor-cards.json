{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cursor-cards",
  "type": "registry:ui",
  "dependencies": [
    "clsx tailwind-merge motion"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/ui/cursor-cards.tsx",
      "content": "\"use client\"\n\nimport React, { useCallback, useEffect, useRef } from \"react\"\nimport { motion, useMotionTemplate, useMotionValue } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface CursorCardsContainerProps {\n  children: React.ReactNode\n  className?: string\n  proximityRange?: number\n}\n\ninterface CursorCardProps {\n  children?: React.ReactNode\n  className?: string\n  illuminationRadius?: number\n  illuminationColor?: string\n  illuminationOpacity?: number\n  primaryHue?: string\n  secondaryHue?: string\n  borderColor?: string\n}\n\ninterface InternalCursorCardProps extends CursorCardProps {\n  globalMouseX?: number\n  globalMouseY?: number\n  isWithinRange?: boolean\n}\n\nfunction useMousePosition(proximityRange: number) {\n  const wrapperRef = useRef<HTMLDivElement>(null)\n  const [mouseState, setMouseState] = React.useState({\n    mousePositionX: 0,\n    mousePositionY: 0,\n    isWithinRange: false,\n  })\n\n  const handlePointerMovement = useCallback(\n    (event: PointerEvent) => {\n      if (!wrapperRef.current) return\n\n      const bounds = wrapperRef.current.getBoundingClientRect()\n      const { clientX, clientY } = event\n\n      const isInProximity =\n        clientX >= bounds.left - proximityRange &&\n        clientX <= bounds.right + proximityRange &&\n        clientY >= bounds.top - proximityRange &&\n        clientY <= bounds.bottom + proximityRange\n\n      setMouseState({\n        mousePositionX: clientX,\n        mousePositionY: clientY,\n        isWithinRange: isInProximity,\n      })\n    },\n    [proximityRange]\n  )\n\n  useEffect(() => {\n    document.addEventListener(\"pointermove\", handlePointerMovement)\n    return () =>\n      document.removeEventListener(\"pointermove\", handlePointerMovement)\n  }, [handlePointerMovement])\n\n  return { wrapperRef, mouseState }\n}\n\nfunction useCardActivation(\n  elementRef: React.RefObject<HTMLDivElement | null>,\n  globalMouseX: number,\n  globalMouseY: number,\n  isWithinRange: boolean,\n  illuminationRadius: number\n) {\n  const localMouseX = useMotionValue(-illuminationRadius)\n  const localMouseY = useMotionValue(-illuminationRadius)\n  const [isCardActive, setIsCardActive] = React.useState(false)\n\n  useEffect(() => {\n    if (!elementRef.current || !isWithinRange) {\n      setIsCardActive(false)\n      localMouseX.set(-illuminationRadius)\n      localMouseY.set(-illuminationRadius)\n      return\n    }\n\n    const rect = elementRef.current.getBoundingClientRect()\n    const extendedProximity = 100\n\n    const isNearCard =\n      globalMouseX >= rect.left - extendedProximity &&\n      globalMouseX <= rect.right + extendedProximity &&\n      globalMouseY >= rect.top - extendedProximity &&\n      globalMouseY <= rect.bottom + extendedProximity\n\n    setIsCardActive(isNearCard)\n\n    if (isNearCard) {\n      localMouseX.set(globalMouseX - rect.left)\n      localMouseY.set(globalMouseY - rect.top)\n    } else {\n      localMouseX.set(-illuminationRadius)\n      localMouseY.set(-illuminationRadius)\n    }\n  }, [\n    globalMouseX,\n    globalMouseY,\n    isWithinRange,\n    illuminationRadius,\n    localMouseX,\n    localMouseY,\n  ])\n\n  return { localMouseX, localMouseY, isCardActive }\n}\n\nexport function CursorCardsContainer({\n  children,\n  className,\n  proximityRange = 400,\n}: CursorCardsContainerProps) {\n  const { wrapperRef, mouseState } = useMousePosition(proximityRange)\n\n  const enhancedChildren = React.Children.map(children, (child) => {\n    if (React.isValidElement(child) && child.type === CursorCard) {\n      return React.cloneElement(\n        child as React.ReactElement<InternalCursorCardProps>,\n        {\n          globalMouseX: mouseState.mousePositionX,\n          globalMouseY: mouseState.mousePositionY,\n          isWithinRange: mouseState.isWithinRange,\n        }\n      )\n    }\n    return child\n  })\n\n  return (\n    <div ref={wrapperRef} className={cn(\"relative\", className)}>\n      {enhancedChildren}\n    </div>\n  )\n}\n\nexport function CursorCard({\n  children,\n  className,\n  illuminationRadius = 200,\n  illuminationColor = \"#FFFFFF10\",\n  illuminationOpacity = 0.8,\n  primaryHue = \"#93C5FD\",\n  secondaryHue = \"#2563EB\",\n  borderColor = \"#E5E5E5\",\n  globalMouseX = 0,\n  globalMouseY = 0,\n  isWithinRange = false,\n}: InternalCursorCardProps) {\n  const elementRef = useRef<HTMLDivElement>(null)\n  const { localMouseX, localMouseY, isCardActive } = useCardActivation(\n    elementRef,\n    globalMouseX,\n    globalMouseY,\n    isWithinRange,\n    illuminationRadius\n  )\n\n  const gradientBackground = useMotionTemplate`\n    radial-gradient(${illuminationRadius}px circle at ${localMouseX}px ${localMouseY}px,\n    ${primaryHue}, \n    ${secondaryHue},\n    ${borderColor} 100%\n    )\n  `\n\n  const illuminationBackground = useMotionTemplate`\n    radial-gradient(${illuminationRadius}px circle at ${localMouseX}px ${localMouseY}px, \n    ${illuminationColor}, transparent 100%)\n  `\n\n  return (\n    <div\n      ref={elementRef}\n      className={cn(\"group relative rounded-[inherit]\", className)}\n    >\n      <motion.div\n        className=\"pointer-events-none absolute inset-0 rounded-[inherit]\"\n        style={{ background: gradientBackground }}\n      />\n      <div className=\"absolute inset-px rounded-[inherit] bg-white dark:bg-black\" />\n      <motion.div\n        className={cn(\n          \"pointer-events-none absolute inset-px rounded-[inherit] opacity-0 transition-opacity duration-300\",\n          isCardActive && \"opacity-100\"\n        )}\n        style={{\n          background: illuminationBackground,\n          opacity: isCardActive ? illuminationOpacity : 0,\n        }}\n      />\n      <div className=\"relative\">{children}</div>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}