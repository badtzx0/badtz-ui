{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "like-button",
  "type": "registry:ui",
  "dependencies": [
    "clsx tailwind-merge",
    "motion"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/ui/like-button.tsx",
      "content": "\"use client\"\n\nimport React, { useState } from \"react\"\nimport { AnimationSequence, useAnimate } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface IconProps {\n  className?: string\n}\n\nconst Icon: React.FC<IconProps> = ({ className }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 512 512\"\n    className={cn(\"h-4 w-4\", className)}\n    fill=\"currentColor\"\n  >\n    <path d=\"M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z\" />\n  </svg>\n)\n\ninterface LikeButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  className?: string\n  children?: React.ReactNode\n  iconCount?: number\n}\n\nexport function LikeButton({\n  className,\n  children,\n  iconCount = 20,\n  ...props\n}: LikeButtonProps) {\n  const [scope, animate] = useAnimate()\n  const [liked, setLiked] = useState<boolean>(false)\n\n  const randomNumber = (min: number, max: number): number =>\n    Math.floor(Math.random() * (max - min + 1) + min)\n\n  const handleClick = () => {\n    setLiked(!liked)\n\n    const icons = Array.from({ length: iconCount })\n    const iconsAnimation = icons.map((_, index) => [\n      `.icon-${index}`,\n      {\n        x: randomNumber(-100, 100),\n        y: randomNumber(-100, 100),\n        opacity: [1, 0],\n        scale: [randomNumber(1, 1.5), 0],\n      },\n      {\n        duration: 0.7,\n        at: \"<\",\n      },\n    ])\n\n    const iconsReset = icons.map((_, index) => [\n      `.icon-${index}`,\n      {\n        x: 0,\n        y: 0,\n      },\n      {\n        duration: 0.000001,\n      },\n    ])\n\n    if (!liked) {\n      animate([...iconsReset, ...iconsAnimation] as AnimationSequence)\n    }\n  }\n\n  return (\n    <div ref={scope} className=\"relative\">\n      <button\n        onClick={handleClick}\n        className={cn(\n          \"relative inline-flex h-10 cursor-pointer items-center justify-center gap-2 rounded-md bg-neutral-100 px-4 py-2 text-sm font-medium whitespace-nowrap transition-colors hover:bg-neutral-100/90 disabled:pointer-events-none disabled:opacity-50 dark:bg-neutral-900 dark:hover:bg-neutral-900/90 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n          liked\n            ? \"text-black dark:text-white\"\n            : \"text-black/70 dark:text-white/70\",\n          className\n        )}\n        {...props}\n      >\n        <Icon\n          className={\n            liked ? \"text-red-500\" : \"text-neutral-200 dark:text-neutral-800\"\n          }\n        />\n        {children}\n        <span aria-hidden className=\"pointer-events-none absolute inset-0\">\n          {Array.from({ length: iconCount }).map((_, index) => (\n            <Icon\n              key={index}\n              className={`absolute top-1/2 left-1/2 text-red-500 opacity-0 icon-${index}`}\n            />\n          ))}\n        </span>\n      </button>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}