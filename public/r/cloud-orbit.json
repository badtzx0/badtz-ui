{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cloud-orbit",
  "type": "registry:ui",
  "dependencies": [
    "clsx tailwind-merge motion"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/ui/cloud-orbit.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface Image {\n  url: string\n  name: string\n}\n\ninterface CloudOrbitProps {\n  duration?: number\n  children?: React.ReactNode\n  size?: number\n  className?: string\n  images?: Image[]\n  [key: string]:\n    | string\n    | number\n    | boolean\n    | React.ReactNode\n    | Image[]\n    | undefined\n}\n\nexport function CloudOrbit({\n  duration = 2,\n  children,\n  size = 160,\n  className,\n  images = [],\n  ...props\n}: CloudOrbitProps) {\n  const [currentIndex, setCurrentIndex] = React.useState(0)\n  const lastTimestamp = React.useRef(0)\n\n  React.useEffect(() => {\n    let animationFrameId: number\n\n    const updateFrame = (timestamp: number) => {\n      if (lastTimestamp.current === 0) {\n        lastTimestamp.current = timestamp\n      }\n\n      const elapsedTime = (timestamp - lastTimestamp.current) / 1000\n      const currentImageIndex =\n        Math.floor(elapsedTime / duration) % images.length\n\n      setCurrentIndex(currentImageIndex)\n\n      animationFrameId = requestAnimationFrame(updateFrame)\n    }\n\n    if (images.length > 0) {\n      animationFrameId = requestAnimationFrame(updateFrame)\n    }\n\n    return () => cancelAnimationFrame(animationFrameId)\n  }, [duration, images.length])\n\n  return (\n    <div\n      style={\n        {\n          \"--size\": `${size}px`,\n        } as React.CSSProperties\n      }\n      className={cn(\n        \"relative flex h-full w-full items-center justify-center rounded-full select-none\",\n        className\n      )}\n      {...props}\n    >\n      <AnimatePresence>\n        {images.length > 0 &&\n          images.map(\n            (image, index) =>\n              index === currentIndex && (\n                <motion.img\n                  key={image.url}\n                  src={image.url}\n                  alt={image.name}\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: [0.8, 1] }}\n                  exit={{ opacity: 0, scale: [1, 0.8] }}\n                  transition={{\n                    type: \"spring\",\n                    stiffness: 100,\n                    damping: 7,\n                  }}\n                  className={cn(\n                    \"absolute z-10 rounded-[inherit] border border-gray-100 bg-gradient-to-t from-neutral-100 to-white inset-shadow-sm inset-shadow-black/2 dark:border-zinc-900 dark:from-zinc-900 dark:to-zinc-800 dark:inset-shadow-white/7\",\n                    className\n                  )}\n                  style={{ width: size, height: size }}\n                />\n              )\n          )}\n      </AnimatePresence>\n      {children}\n    </div>\n  )\n}\n\ninterface OrbitingImageProps {\n  speed?: number\n  radius?: number\n  startAt?: number\n  size?: number\n  className?: string\n  images?: Image[]\n  duration?: number\n  [key: string]:\n    | string\n    | number\n    | boolean\n    | React.ReactNode\n    | Image[]\n    | undefined\n}\n\nexport function OrbitingImage({\n  speed = 20,\n  radius = 100,\n  startAt = 0,\n  size = 80,\n  className,\n  images = [],\n  duration = 2,\n  ...props\n}: OrbitingImageProps) {\n  const [currentIndex, setCurrentIndex] = React.useState(0)\n  const lastTimestamp = React.useRef(0)\n\n  React.useEffect(() => {\n    let animationFrameId: number\n\n    const updateFrame = (timestamp: number) => {\n      if (lastTimestamp.current === 0) {\n        lastTimestamp.current = timestamp\n      }\n\n      const elapsedTime = (timestamp - lastTimestamp.current) / 1000\n      const currentImageIndex =\n        Math.floor(elapsedTime / duration) % images.length\n\n      setCurrentIndex(currentImageIndex)\n\n      animationFrameId = requestAnimationFrame(updateFrame)\n    }\n\n    if (images.length > 0) {\n      animationFrameId = requestAnimationFrame(updateFrame)\n    }\n\n    return () => cancelAnimationFrame(animationFrameId)\n  }, [duration, images.length])\n\n  return (\n    <motion.div\n      style={{\n        width: size,\n        height: size,\n        position: \"absolute\",\n        left: \"50%\",\n        top: \"50%\",\n        marginLeft: -size / 2,\n        marginTop: -size / 2,\n      }}\n      animate={{\n        transform: [\n          `rotate(${startAt * 360}deg) translateY(-${radius}px) rotate(-${startAt * 360}deg)`,\n          `rotate(${startAt * 360 + 90}deg) translateY(-${radius}px) rotate(-${startAt * 360 + 90}deg)`,\n          `rotate(${startAt * 360 + 180}deg) translateY(-${radius}px) rotate(-${startAt * 360 + 180}deg)`,\n          `rotate(${startAt * 360 + 270}deg) translateY(-${radius}px) rotate(-${startAt * 360 + 270}deg)`,\n          `rotate(${startAt * 360 + 360}deg) translateY(-${radius}px) rotate(-${startAt * 360 + 360}deg)`,\n        ],\n      }}\n      transition={{\n        duration: speed,\n        repeat: Infinity,\n        ease: \"linear\",\n      }}\n      className={cn(\n        \"absolute z-[5] flex transform-gpu items-center justify-center rounded-full p-[5%]\",\n        className\n      )}\n      {...props}\n    >\n      <AnimatePresence>\n        {images.length > 0 &&\n          images.map(\n            (image, index) =>\n              index === currentIndex && (\n                <motion.div\n                  key={image.url}\n                  style={{\n                    width: `${size}px`,\n                    height: `${size}px`,\n                    position: \"absolute\",\n                  }}\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: [0.8, 1] }}\n                  exit={{ opacity: 0, scale: [1, 0.8] }}\n                  transition={{\n                    type: \"spring\",\n                    stiffness: 100,\n                    damping: 7,\n                  }}\n                  className={cn(\n                    \"rounded-full border border-gray-100 bg-gradient-to-t from-neutral-100 to-white p-[15%] inset-shadow-sm inset-shadow-black/2 dark:border-zinc-900 dark:from-zinc-900 dark:to-zinc-800 dark:inset-shadow-white/7\",\n                    className\n                  )}\n                >\n                  <img\n                    src={image.url}\n                    alt={image.name}\n                    className=\"flex h-full w-full items-center justify-center rounded-full object-contain\"\n                  />\n                </motion.div>\n              )\n          )}\n      </AnimatePresence>\n    </motion.div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}